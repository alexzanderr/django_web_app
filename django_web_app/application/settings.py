"""
Django settings for application project.

Generated by 'django-admin startproject' using Django 3.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

# use this for your config

from utilities import _get_conf
Configuration = _get_conf()




from pathlib import Path
import json
import os


# 3rd
from dotenv import load_dotenv; load_dotenv()

print(os.getenv("SPACES"))



ProjectStateFile = Path("ProjectState.json")
__state = json.loads(ProjectStateFile.read_text())["state"].split(",")[0].strip().lower()

class Project__:
    def __init__(self, __state: str) -> None:
        if __state == "development":
            self.State = Configuration.Development
        elif __state == "staging":
            self.State = Configuration.Staging
        else:
            self.State = Configuration.Production

Project = Project__(__state)


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)

# ~/Alexzander__/programming/projects/django_web_app/django_web_app/application/
# BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

from ._settings import *

from pathlib import Path

PROJECT_ROOT = Path(BASE_DIR)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!


# from ..credentials import Credentials:
SECRET_KEY = Project.State.SECRET_KEY

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = Project.State.DEBUG

ALLOWED_HOSTS = Project.State.ALLOWED_HOSTS






SHOW_TOOLBAR_CALLBACK = True

ROOT_URLCONF = 'application.urls'


WSGI_APPLICATION = 'application.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

if Project.State.REMOTE_DATABASES:
    DATABASES = {
        "default": {},
        # 'default': {
        #     'ENGINE': 'django.db.backends.sqlite3',
        #     'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        # },
        # django_web_app_postgresql_db
        Project.State.PostgreSQL.DATABASE_AUTH: {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": Project.State.PostgreSQL.DATABASE_AUTH,
            "USER": Project.State.PostgreSQL.USERNAME,
            "PASSWORD": Project.State.PostgreSQL.PASSWORD,
            "HOST": Project.State.PostgreSQL.HOST,
            "PORT": Project.State.PostgreSQL.PORT
        },
        Project.State.PostgreSQL.Cloud.DATABASE: {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": Project.State.PostgreSQL.Cloud.DATABASE,
            "USER": Project.State.PostgreSQL.Cloud.USERNAME,
            "PASSWORD": Project.State.PostgreSQL.Cloud.PASSWORD,
            "HOST": Project.State.PostgreSQL.Cloud.HOST,
        },
        # django_web_app_mongo_db_remote
        Project.State.MongoDB.Cloud.DATABASE: {
            "ENGINE": "djongo",
            "NAME": Project.State.MongoDB.Cloud.DATABASE,
            "CLIENT": {
                # "host": Project.State.MongoDB.HOST,
                "host": Project.State.MongoDB.Cloud.CONNECTION_STRING,
                # "port": Project.State.MongoDB.PORT,
                # "username": Project.State.MongoDB.USERNAME,
                # "password": Project.State.MongoDB.PASSWORD,
                # "authSource": Project.State.MongoDB.AUTHSOURCE
            }
        },
        Project.State.MySQL.Cloud.DATABASE: {
            "ENGINE": "django.db.backends.mysql",
            "NAME": Project.State.MySQL.Cloud.DATABASE,
            "USER": Project.State.MySQL.Cloud.USERNAME,
            "PASSWORD": Project.State.MySQL.Cloud.PASSWORD,
            "HOST": Project.State.MySQL.Cloud.HOST,
            "PORT": Project.State.MySQL.Cloud.PORT
        }
    }
else:
    DATABASES = {
        "default": {},
        # 'default': {
        #     'ENGINE': 'django.db.backends.sqlite3',
        #     'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        # },
        # django_web_app_postgresql_db
        Project.State.PostgreSQL.DATABASE_AUTH: {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": Project.State.PostgreSQL.DATABASE_AUTH,
            "USER": Project.State.PostgreSQL.USERNAME,
            "PASSWORD": Project.State.PostgreSQL.PASSWORD,
            "HOST": Project.State.PostgreSQL.HOST,
            "PORT": Project.State.PostgreSQL.PORT
        },
        Project.State.PostgreSQL.DATABASE_DJANGO: {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": Project.State.PostgreSQL.DATABASE_DJANGO,
            "USER": Project.State.PostgreSQL.USERNAME,
            "PASSWORD": Project.State.PostgreSQL.PASSWORD,
            "HOST": Project.State.PostgreSQL.HOST,
            "PORT": Project.State.PostgreSQL.PORT
        },
        # django_web_app_mongo_db
        Project.State.MongoDB.DATABASE_DJANGO: {
            "ENGINE": "djongo",
            "NAME": Project.State.MongoDB.DATABASE_DJANGO,
            "CLIENT": {
                "host": Project.State.MongoDB.HOST,
                "port": Project.State.MongoDB.PORT,
                "username": Project.State.MongoDB.USERNAME,
                "password": Project.State.MongoDB.PASSWORD,
                "authSource": Project.State.MongoDB.AUTHSOURCE
            }
        },
        Project.State.MySQL.DATABASE_DJANGO: {
            "ENGINE": "django.db.backends.mysql",
            "NAME": Project.State.MySQL.DATABASE_DJANGO,
            "USER": Project.State.MySQL.USERNAME,
            "PASSWORD": Project.State.MySQL.PASSWORD,
            "HOST": Project.State.MySQL.HOST,
            "PORT": Project.State.MySQL.PORT
        }
    }


DATABASE_ROUTERS = [
    "routers.database_routers.AuthRouter",
    "routers.database_routers.PostgresqlRouter",
    "routers.database_routers.RemotePostgresqlRouter",
    "routers.database_routers.MongodbRouter",
    "routers.database_routers.RemoteMongodbRouter",
    "routers.database_routers.MySQLRouter",
    "routers.database_routers.RemoteMySQLRouter",
]


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_L10N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'

# static root is for
# python manage.py collectstatic
# these files need to be server to nginx
# gunicorn doesnt server static files
# neither django, just the runserver
STATIC_ROOT = os.path.join(BASE_DIR, "nginx/static")

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
    # without this it doesnt work
    os.path.join(BASE_DIR, "static/logo"),
]

mini_apps = [
    "todos",
    "api"
]
STATICFILES_DIRS.extend([
    # maybe ? it works
    os.path.join(BASE_DIR, f"{app}/static") for app in mini_apps
])

# STATICFILES_FINDERS = [
    # asta era problema pentru static
    # dont use this, its going to break your code!!
    # 'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    # "djangobower.finders.BowerFinder"
# ]

# these dont work
# this should handle extra slash at the end of url
# APPEND_SLASH = True
# PREPEND_WWW = False

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [
        # 'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly',
        "rest_framework.permissions.DjangoModelPermissions",
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.permissions.IsAdminUser'
    ],
}


SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"


LIVERELOAD_HOST="localhost"
LIVERELOAD_PORT="5554"

# Always use ptpython for shell_plus
# 3rd package
SHELL_PLUS = "ptpython"



# for debug-toolbar
INTERNAL_IPS = [
    "*",
    # "127.0.0.1",
    # ...
]


import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration


sentry_sdk.init(
    dsn=Project.State.Sentry.DSN,
    integrations=[DjangoIntegration()],

    # Set traces_sample_rate to 1.0 to capture 100%
    # of transactions for performance monitoring.
    # We recommend adjusting this value in production.
    traces_sample_rate=1.0,

    # If you wish to associate users to errors (assuming you are using
    # django.contrib.auth) you may enable sending PII data.
    send_default_pii=True
)


